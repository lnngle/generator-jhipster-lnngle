import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Optional } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { I18NService, StartupService } from '@core';
import { ReuseTabService } from '@delon/abc/reuse-tab';
import { DA_SERVICE_TOKEN, ITokenService } from '@delon/auth';
import { ALAIN_I18N_TOKEN, _HttpClient } from '@delon/theme';
import { RoutesApi } from '@shared';
import { finalize } from 'rxjs/operators';

@Component({
  selector: 'passport-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.less'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class UserLoginComponent {
  constructor(
    fb: FormBuilder,
    private router: Router,
    @Inject(ALAIN_I18N_TOKEN) private i18n: I18NService,
    @Optional()
    @Inject(ReuseTabService)
    private reuseTabService: ReuseTabService,
    @Inject(DA_SERVICE_TOKEN) private tokenService: ITokenService,
    private startupSrv: StartupService,
    private http: _HttpClient,
    private cdr: ChangeDetectorRef
  ) {
    this.form = fb.group({
      username: [null, [Validators.required]],
      password: [null, [Validators.required]],
      remember: [true]
    });
  }

  // #region fields

  get username(): AbstractControl {
    return this.form.get('username')!;
  }
  get password(): AbstractControl {
    return this.form.get('password')!;
  }
  get remember(): AbstractControl {
    return this.form.get('remember')!;
  }
  form: FormGroup;
  error = '';
  type = 0;
  loading = false;

  submit(): void {
    this.error = '';
    this.username.markAsDirty();
    this.username.updateValueAndValidity();
    this.password.markAsDirty();
    this.password.updateValueAndValidity();
    if (this.username.invalid || this.password.invalid) {
      return;
    }

    // 默认配置中对所有HTTP请求都会强制 [校验](https://ng-alain.com/auth/getting-started) 用户 Token
    // 然一般来说登录请求不需要校验，因此可以在请求URL加上：`/login?_allow_anonymous=true` 表示不触发用户 Token 校验
    this.loading = true;
    this.cdr.detectChanges();
    this.http
      .post(`${RoutesApi.authenticate}?_allow_anonymous=true`, {
        type: this.type,
        username: this.username.value,
        password: this.password.value,
        rememberMe: this.remember.value
      })
      .pipe(
        finalize(() => {
          this.loading = true;
          this.cdr.detectChanges();
        })
      )
      .subscribe(
        res => {
          // 清空路由复用信息
          this.reuseTabService.clear();
          // 设置用户Token信息
          // TODO: Mock expired value
          const expired = +new Date() + 1000 * 60 * 5;
          this.tokenService.set({ token: res.id_token, expired: expired, username: this.username.value });
          // 重新获取 StartupService 内容，我们始终认为应用信息一般都会受当前用户授权范围而影响
          this.startupSrv.load().subscribe(() => {
            let url = this.tokenService.referrer!.url || '/';
            if (url.includes('/passport')) {
              url = '/';
            }
            this.router.navigateByUrl(url);
          });
        },
        () => {
          this.error = this.i18n.fanyi('login.messages.error.authentication');
          this.cdr.detectChanges();
        },
        () => {}
      );
  }
}
